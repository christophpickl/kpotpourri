
//_                _                               _
//| | ___ __   ___ | |_ _ __   ___  _   _ _ __ _ __(_)
//| |/ / '_ \ / _ \| __| '_ \ / _ \| | | | '__| '__| |
//|   <| |_) | (_) | |_| |_) | (_) | |_| | |  | |  | |
//|_|\_\ .__/ \___/ \__| .__/ \___/ \__,_|_|  |_|  |_|
//|_|             |_|

// ./gradlew install -Dkpotpourri.version=1.X-SNAPSHOT

buildscript {
    ext.myVersion = System.getProperty("kpotpourri.version", "SNAPSHOT")
    // ext.kotlin_version = '1.1.3-2' ... introduces a nasty bug [KT-18475]
    // ext.kotlin_version = '1.1.4-eap-77' ... nope, doesnt work somehow :'-(
    ext.kotlin_version = '1.1.1'
    ext.dokka_version = '0.9.13'

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'com.autoscout24.gradle:gradle-todo-plugin:1.0'
        classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.1" // as i dont know how to apply via plugins {} to submodules
        classpath 'org.standardout:gradle-versioneye-plugin:1.4.0'
    }
}

println "[KPOT] Building version: ${myVersion}"
println "[KPOT] -D BINTRAY_USER=${System.getenv('BINTRAY_USER')}"

group = 'com.github.christophpickl.kpotpourri'
version = myVersion


apply plugin: 'org.standardout.versioneye'
versioneye {
    includeSubProjects = true
}

allprojects {
    group = 'com.github.christophpickl.kpotpourri'
    version = myVersion
    repositories {
        jcenter()
        mavenCentral()
    }

    apply plugin: 'idea'

    // https://discuss.gradle.org/t/travis-ci-org-gradle-launcher-daemon-client-daemondisappearedexception-gradle-build-daemon-disappeared-unexpectedly-it-may-have-been-killed-or-may-have-crashed/13106/3
    if (System.env.TRAVIS == 'true') {
        tasks.withType(GroovyCompile) {
            groovyOptions.fork = false
        }
        tasks.withType(Test) {
            // containers (currently) have 2 dedicated cores and 4GB of memory
            maxParallelForks = 1
            minHeapSize = '128m'
        }
    }
}

// VERSIONS
project.ext.version_apache_httpclient = "4.5.3"
project.ext.version_asm = "5.2"
project.ext.version_fuel = "1.5.0"
project.ext.version_guava = "21.0"
project.ext.version_guice = "4.1.0"
project.ext.version_hamkrest = "1.4.0.0"
project.ext.version_jackson = "2.8.8" // jackson-databind is actually 2.8.8.1
project.ext.version_jackson_kotlin = "2.8.8"
project.ext.version_jacoco = "0.7.9"
project.ext.version_jcl = "1.7.25"
project.ext.version_jetty = "9.4.5.v20170502"
project.ext.version_junit = "4.12"
project.ext.version_kotlin_logging = "1.4.4"
project.ext.version_logback = "1.2.3"
project.ext.version_mockito_kotlin = "1.4.0"
project.ext.version_resteasy = "3.1.2.Final"
project.ext.version_resteasy_jackson = "3.1.2.Final"
project.ext.version_servlet = "3.1.0"
project.ext.version_spring = "4.3.8.RELEASE"
project.ext.version_testng = "6.11"
project.ext.version_wiremock = "2.6.0"

subprojects { subproject ->

    println("[KPOT]")
    println("[KPOT] Configuring subproject '${subproject.name}' with version '${version}'")

    apply plugin: "kotlin"
    apply plugin: "kotlin-noarg"
    apply plugin: 'org.jetbrains.dokka'
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'com.autoscout24.gradle.todo'
    apply plugin: "jacoco"
    apply plugin: "com.github.kt3k.coveralls"
    apply plugin: 'com.jfrog.bintray'
//    apply plugin: 'signing'

    noArg {
        annotation("com.github.christophpickl.kpotpourri.common.KotlinNoArg")
    }

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'


    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        // compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
        compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

        compile "io.github.microutils:kotlin-logging:" + version_kotlin_logging
        runtime "org.slf4j:jcl-over-slf4j:" + rootProject.version_jcl
        compile "com.google.guava:guava:" + version_guava

        if (subproject.name != "test4k") {
            testCompile project(':test4k')
        }
        testRuntime "ch.qos.logback:logback-classic:" + version_logback
    }

    test {
        useTestNG()
        scanForTestClasses true
        reports {
            junitXml.enabled = true
            html.enabled = true
        }
    }

    todo {
        todoPattern = "//[\\t\\s]*(FIXME|TODO) (.*)"
        failIfFound = true
        sourceFolder = "${subproject.name}/src" // in order to look into main and test folders
        fileExtensions = ["kt"]
    }

    jacoco {
        toolVersion = version_jacoco
    }

    test {
        testLogging.showStandardStreams = false
        reports.junitXml.destination = file("${buildDir}/test-results/unit")
        useTestNG() {
//            excludeGroups 'uiTest', 'mTest'
        }

        testLogging {
            events "skipped", "failed", "standardError"
            exceptionFormat "full"
        }
        jacoco {
            append = true
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    jar {
        manifest {
            attributes 'Implementation-Title': 'kpotpourri - ${subproject.name}',
                    'Implementation-Vendor': 'Christoph Pickl',
                    'Implementation-Version': myVersion
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task testJar(type: Jar) {
        classifier = 'tests'
        from sourceSets.test.output
    }

    task testSourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'testSources'
        from sourceSets.test.allSource
    }

    task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
        outputFormat = 'html'
        outputDirectory = javadoc.destinationDir
        inputs.dir 'src/main/kotlin'
    }

    task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }


    artifacts {
        archives sourcesJar
        archives javadocJar
        archives testJar
    }



// plugin howto: https://github.com/bintray/gradle-bintray-plugin
// how to ReSTful upload: https://bintray.com/docs/api/#_upload_content
    def pomConfig = {
//    licenses {
//        license {
//            name "The Apache Software License, Version 2.0"
//            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
//            distribution "repo"
//        }
//    }
        developers {
            developer {
                id "cpickl"
                name "Christoph Pickl"
                email "christoph.pickl@gmail.com"
            }
        }
    }

    publishing {
        publications {
            MyPublication(MavenPublication) {
                from components.java
            artifact sourcesJar
            artifact javadocJar
                groupId 'com.github.christophpickl.kpotpourri'
                artifactId subproject.name
                version myVersion
                pom.withXml {
                    def root = asNode()
                    root.appendNode('description', 'Some common extensions to kotlin which i am desperately missing')
                    root.appendNode('name', 'kpotpourri ' + subproject.name)
                    root.appendNode('url', 'https://github.com/christophpickl/kpotpourri/')
                    root.children().last() + pomConfig
                }
            }
        }
    }

    bintray {
        user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
        key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')

//        publications = ['mavenJava']
//        configurations = ['archives']
    publications = ['MyPublication']

//        dryRun = false //Whether to run this as dry-run, without deploying
        //noinspection GroovyAssignabilityCheck
        publish = true //If version should be auto published after an upload

        pkg {
            repo = 'cpickl'
            name = 'kpotpourri'
            userOrg = user
            licenses = ['Apache-2.0']
            vcsUrl = 'https://github.com/christophpickl/kpotpourri.git'
//        labels = ['gear', 'gore', 'gorilla']
            publicDownloadNumbers = true
//        attributes= ['a': ['ay1', 'ay2'], 'b': ['bee'], c: 'cee'] //Optional package-level attributes
            githubRepo = 'christophpickl/kpotpourri' //Optional Github repository
            githubReleaseNotesFile = 'README.md' //Optional Github readme file

            version {
                name = myVersion
                desc = "KPotpourri"
                released = new Date()
                vcsTag = "tags/$myVersion"
                attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
            }
        }
    }

    task verifyNotSnapshotVersion() {
        doFirst {
            println("[KPOT] Checking version for SNAPSHOT ...")
            if (myVersion == "SNAPSHOT") {
                println("no please dont!")
                throw new GradleException("[KPOT] Tried to upload a SNAPSHOT version to bintray! Use the release script which defines -Dkpotpourri.version for that purpose.")
            }
        }
    }

    bintrayUpload.dependsOn verifyNotSnapshotVersion

    dokka {
//        moduleName = 'data'
        outputFormat = 'html'
    }

//    signing {
//        required { hasProperty("sign") || gradle.taskGraph.hasTask("uploadArchives") }
//        sign configurations.archives
//    }

//    task ossrhAuthentication << {
//        if (!(project.hasProperty('ossrh.username') && project.hasProperty('ossrh.password'))) {
//            throw new InvalidUserDataException("no OSSRH username and/or password!")
//        }
//    }

//    uploadArchives {
//        dependsOn ossrhAuthentication
//    https://github.com/npryce/hamkrest/blob/master/build.gradle
}

