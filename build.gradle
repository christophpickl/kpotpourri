
// $ ./gradlew bintrayUpload


buildscript {
    // version()
    ext.myVersion = System.getProperty("kpotpourri.version", "SNAPSHOT")
    ext.kotlin_version = '1.1.1'
    ext.dokka_version = '0.9.13'

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // https://github.com/Kotlin/dokka/blob/master/README.md
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"

        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'com.autoscout24.gradle:gradle-todo-plugin:1.0'
    }
}

println "[KPOT] Building version: ${myVersion}"
println "[KPOT] -D BINTRAY_USER=${System.getenv('BINTRAY_USER')}"

group = 'com.github.christophpickl.kpotpourri'
version = myVersion

allprojects {
    group = 'com.github.christophpickl.kpotpourri'
    version = myVersion
    repositories {
        jcenter()
        mavenCentral()
    }
}

subprojects { subproject ->

    println("[KPOT] Configuring subproject '${subproject.name}' with version '${version}'")

    apply plugin: "kotlin"
    apply plugin: 'org.jetbrains.dokka'

    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'com.autoscout24.gradle.todo'
//    apply plugin: 'maven'
//    apply plugin: 'signing'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'


    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        // compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

        compile 'org.slf4j:slf4j-api:1.7.22'


        testCompile 'org.testng:testng:6.10'
        testCompile 'com.natpryce:hamkrest:1.3.0.0'
    }

    test {
        useTestNG()

        scanForTestClasses true
        reports {
            junitXml.enabled = true
            html.enabled = true
        }

//        beforeTest { desc ->
//            print "[KPOT] ${desc.className.substring("com.github.christophpickl.kpotpourri..".length())}: ${desc.name.replace("_", " ")}"
//        }
//        afterTest { desc, result ->
//            println " -> ${result.resultType}"
//        }
    }

    todo {
        todoPattern = "//[\\t\\s]*(FIXME|TODO) (.*)"
        failIfFound = true
        sourceFolder = "${subproject.name}/src" // in order to look into main and test folders
        fileExtensions = ["kt"]
    }


    jar {
        manifest {
            attributes 'Implementation-Title': 'kpotpourri - ${subproject.name}',
                    'Implementation-Vendor': 'Christoph Pickl',
                    'Implementation-Version': myVersion
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task testJar(type: Jar) {
        classifier = 'tests'
        from sourceSets.test.output
    }

    task testSourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'testSources'
        from sourceSets.test.allSource
    }

    task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
        outputFormat = 'javadoc'
        outputDirectory = javadoc.destinationDir
        inputs.dir 'src/main/kotlin'
    }

    task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    // FIXME automatically execute dokka task on package
    dokka {
//        moduleName = 'data'
        outputFormat = 'javadoc'
//        outputDirectory = "$buildDir/javadoc"
//        processConfigurations = ['compile', 'extra']
//        includes = ['packages.md', 'extra.md']
//        samples = ['samples/basic.kt', 'samples/advanced.kt']
//        linkMapping {
//            dir = "src/main/kotlin"
//            url = "https://github.com/cy6erGn0m/vertx3-lang-kotlin/blob/master/src/main/kotlin"
//            suffix = "#L"
//        }
//        sourceDirs = files('src/main/kotlin')
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
        archives testJar
    }

//    signing {
//        required { hasProperty("sign") || gradle.taskGraph.hasTask("uploadArchives") }
//        sign configurations.archives
//    }

//    task ossrhAuthentication << {
//        if (!(project.hasProperty('ossrh.username') && project.hasProperty('ossrh.password'))) {
//            throw new InvalidUserDataException("no OSSRH username and/or password!")
//        }
//    }

//    uploadArchives {
//        dependsOn ossrhAuthentication
//    https://github.com/npryce/hamkrest/blob/master/build.gradle


// plugin howto:
//   https://github.com/bintray/gradle-bintray-plugin
// how to ReSTful upload:
//   https://bintray.com/docs/api/#_upload_content

    def pomConfig = {
//    licenses {
//        license {
//            name "The Apache Software License, Version 2.0"
//            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
//            distribution "repo"
//        }
//    }
        developers {
            developer {
                id "cpickl"
                name "Christoph Pickl"
                email "christoph.pickl@gmail.com"
            }
        }
    }

    publishing {
        publications {
            MyPublication(MavenPublication) {
                from components.java
                // TODO this does not work :-(
            artifact sourcesJar
            artifact javadocJar
                groupId 'com.github.christophpickl.kpotpourri'
                artifactId subproject.name
                version myVersion
                pom.withXml {
                    def root = asNode()
                    root.appendNode('description', 'Some common extensions to kotlin which i am desperately missing')
                    root.appendNode('name', 'kpotpourri ' + subproject.name)
                    root.appendNode('url', 'https://github.com/christophpickl/kpotpourri/')
                    root.children().last() + pomConfig
                }
            }
        }
    }

    bintray {
        user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
        key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')

//        publications = ['mavenJava']
//        configurations = ['archives']
    publications = ['MyPublication']

//        dryRun = false //Whether to run this as dry-run, without deploying
        publish = true //If version should be auto published after an upload

        pkg {
            repo = 'cpickl'
            name = 'kpotpourri'
            userOrg = user
            licenses = ['Apache-2.0']
            vcsUrl = 'https://github.com/christophpickl/kpotpourri.git'
//        labels = ['gear', 'gore', 'gorilla']
            publicDownloadNumbers = true
//        attributes= ['a': ['ay1', 'ay2'], 'b': ['bee'], c: 'cee'] //Optional package-level attributes
            githubRepo = 'christophpickl/kpotpourri' //Optional Github repository
            githubReleaseNotesFile = 'README.md' //Optional Github readme file

            version {
                name = myVersion
                desc = "KPotpourri"
                released = new Date()
                vcsTag = "tags/$myVersion"
                attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
            }
        }
    }

    task verifyNotSnapshotVersion {
        println("[KPOT] Checking version for SNPASHOT ...")
        if (myVersion.equals("SNAPSHOT")) {
            println("no please dont!")
            throw new GradleException("[KPOT] Tried to upload a SNAPSHOT version to bintray! Use the release script which defines -Dkpotpourri.version for that purpose.")
        }
    }

    bintrayUpload.dependsOn verifyNotSnapshotVersion

}


task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
}
