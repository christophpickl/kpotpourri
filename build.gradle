//_                _                               _
//| | ___ __   ___ | |_ _ __   ___  _   _ _ __ _ __(_)
//| |/ / '_ \ / _ \| __| '_ \ / _ \| | | | '__| '__| |
//|   <| |_) | (_) | |_| |_) | (_) | |_| | |  | |  | |
//|_|\_\ .__/ \___/ \__| .__/ \___/ \__,_|_|  |_|  |_|
//|_|             |_|

// ./gradlew install -Dkpotpourri.version=1.X-SNAPSHOT

buildscript {
    ext.myVersion = System.getProperty("kpotpourri.version", "SNAPSHOT")
    apply from: "$rootDir/gradle/dependency_versions.gradle"

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$version_kotlin"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$version_kotlin"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$version_kotlin"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$version_dokka"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$version_bintray"
//        classpath "com.autoscout24.gradle:gradle-todo-plugin:1.0"
        classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:$version_coveralls"
        classpath "org.standardout:gradle-versioneye-plugin:$version_versioneye"
    }
}

apply plugin: 'org.standardout.versioneye'
versioneye {
    includeSubProjects = true
}

allprojects {
    group = 'com.github.christophpickl.kpotpourri'
    version = myVersion
    repositories {
        jcenter()
        mavenCentral()
    }

    apply plugin: 'idea'

    // https://discuss.gradle.org/t/travis-ci-org-gradle-launcher-daemon-client-daemondisappearedexception-gradle-build-daemon-disappeared-unexpectedly-it-may-have-been-killed-or-may-have-crashed/13106/3
    if (System.env.TRAVIS == 'true') {
        tasks.withType(GroovyCompile) {
            groovyOptions.fork = false
        }
        tasks.withType(Test) {
            // containers (currently) have 2 dedicated cores and 4GB of memory
            maxParallelForks = 1
            minHeapSize = '128m'
        }
    }
}


subprojects { subproject ->

    // println("[KPOT] Configuring subproject '${subproject.name}' with version '${version}'")

    apply plugin: "kotlin"
    apply plugin: "kotlin-noarg"
    apply plugin: 'java'
    apply plugin: 'org.jetbrains.dokka'
//    apply plugin: 'com.autoscout24.gradle.todo'
    apply plugin: "jacoco"
    apply plugin: "com.github.kt3k.coveralls"
    apply from: "$rootDir/gradle/packaging.gradle"
    apply from: "$rootDir/gradle/publishing.gradle"


    noArg {
        annotation("com.github.christophpickl.kpotpourri.common.KotlinNoArg")
    }

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'


    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:$version_kotlin"
        // compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:version_kotlin"
        compile "org.jetbrains.kotlin:kotlin-reflect:$version_kotlin"

        compile "io.github.microutils:kotlin-logging:" + version_kotlin_logging
        runtime "org.slf4j:jcl-over-slf4j:" + version_jcl
        compile "com.google.guava:guava:" + version_guava

        if (subproject.name != "test4k") {
            testCompile project(':test4k')
        }
        testRuntime "ch.qos.logback:logback-classic:" + version_logback
    }

    test {
        useTestNG()
        scanForTestClasses true
        reports {
            junitXml.enabled = true
            html.enabled = true
        }
    }

//    todo {
//        todoPattern = "//[\\t\\s]*(FIXME|TODO) (.*)"
//        failIfFound = true
//        sourceFolder = "${subproject.name}/src" // in order to look into main and test folders
//        fileExtensions = ["kt"]
//    }

    jacoco {
        toolVersion = version_jacoco
    }

    test {
        testLogging.showStandardStreams = false
        reports.junitXml.destination = file("${buildDir}/test-results/unit")
        useTestNG() {
//            excludeGroups 'uiTest', 'mTest'
        }

        testLogging {
            events "skipped", "failed", "standardError"
            exceptionFormat "full"
        }
        jacoco {
            append = true
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    jar {
        manifest {
            attributes 'Implementation-Title': 'kpotpourri - ${subproject.name}',
                    'Implementation-Vendor': 'Christoph Pickl',
                    'Implementation-Version': myVersion
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task testJar(type: Jar) {
        classifier = 'tests'
        from sourceSets.test.output
    }

    task testSourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'testSources'
        from sourceSets.test.allSource
    }

    task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
        outputFormat = 'html'
        outputDirectory = javadoc.destinationDir
        inputs.dir 'src/main/kotlin'
    }

    task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }


    artifacts {
        archives sourcesJar
        archives javadocJar
        archives testJar
    }

    // execute "gradle listDependencies" on root project, dumps dependencies for all submodules (hack needed in gradle)
    task listDependencies(type: DependencyReportTask) {}


    dokka {
//        moduleName = 'data'
        outputFormat = 'html'
    }

}

